import requests
import time
from threading import Thread, Event, Lock
from datetime import datetime
import telebot
from queue import Queue
from hashlib import md5
import re

from back.database import *

from back.config import *

class MessageProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    def __init__(self, config: Config, db: Database):
        self.config = config
        self.db = db
        self.telegram_bot = telebot.TeleBot(config.telegram_bot_token)
        self.message_queue = Queue(maxsize=100)
        self.processed_messages = set()
        self.pending_responses = {}
        self.lock = Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        self._setup_telegram_handlers()
    
    def _setup_telegram_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ Telegram"""
        @self.telegram_bot.message_handler(func=lambda message: True)
        def handle_message(message):
            if message.reply_to_message and message.reply_to_message.message_id in self.pending_responses:
                original_msg = self.pending_responses[message.reply_to_message.message_id]
                self._send_to_mattermost(
                    original_msg['channel_id'],
                    f"–û—Ç–≤–µ—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω—Ü–∞: {message.text}",
                    original_msg['post_id']
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.db.update_message_response(
                    original_msg['message_hash'],
                    message.text,
                    str(message.from_user.id),
                    time.time()
                )
                
                self.telegram_bot.send_message(
                    message.chat.id,
                    "–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Mattermost!",
                    reply_to_message_id=message.message_id
                )
                return
            
            elif message.text.startswith('/'):
                if message.text=='/start' or message.text=='/start@taxmon_python_test_bot':
                    markup = telebot.types.InlineKeyboardMarkup()
                    markup.add(telebot.types.InlineKeyboardButton(
                            text="–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è",
                            callback_data='introduce'
                        ))
                        
                    self.telegram_bot.send_message(
                        message.chat.id,
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –í–∞–ª–µ—Ä–∞. \n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–∂–¥—É —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º –∏ –º–∞—Ç—Ç–µ—Ä–º–æ—Å—Ç–æ–º.",
                        parse_mode='HTML',
                        reply_markup=markup,
                        disable_web_page_preview=True
                    )

                elif message.text=='/help' or message.text=='/help@taxmon_python_test_bot':
                    help_text = (
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
                        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
                        "/info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
                        "/—è—Ä–º–∞—Ä–∫–∞ - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
                    )
                    self.telegram_bot.reply_to(message, help_text)
                    return

                elif message.text == '/—è—Ä–º–∞—Ä–∫–∞' or message.text=='/—è—Ä–º–∞—Ä–∫–∞@taxmon_python_test_bot':
                    random_user = self._get_random_user_by_position('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
                    if random_user:
                        user_info = f"–°–ª—É—á–∞–π–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é:\n" \
                                    f"–ò–º—è: {random_user[3]}\n" \
                                    f"–§–∞–º–∏–ª–∏—è: {random_user[4]}\n" \
                                    f"Email: {random_user[6]}\n" \
                                    f"Telegram: {random_user[7]}"
                                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏—Ñ–∫–∏
                        gif_url = "https://i.pinimg.com/originals/7d/a9/f0/7da9f09c8b61866d87a5c0db8e4957db.gif"
                        self.telegram_bot.send_animation(message.chat.id, gif_url)
                        self.telegram_bot.send_message(message.chat.id, user_info)
                    else:
                        self.telegram_bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é.")
                
                elif message.text=='/info' or message.text=='/info@taxmon_python_test_bot':
                    info_text = (
                        "üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ (–Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ) –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!** üåü\n\n"
                        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Mattermost, –¥–∞–∂–µ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                        "üîî **–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç?**\n"
                        "- –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –∏–∑ Mattermost.\n"
                        "- –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö, –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.\n\n"
                        "üí¨ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n"
                        "- –ï—Å–ª–∏ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç—Ä–µ–¥ Mattermost.\n"
                        "- –ï—Å–ª–∏ –≤—ã –±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É, –æ–Ω–∞ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∑–∞ –≤–∞–º–∏. –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∑—è–ª –µ—ë, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
                        "üîó **–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ:**\n"
                        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º.\n\n"
                        "ü§ñ **–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à—É —Ä–∞–±–æ—Ç—É –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π!**"
                    )
                    self.telegram_bot.reply_to(message, info_text, parse_mode='Markdown')
                    return

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            elif message.reply_to_message is not None:
                if message.reply_to_message.from_user.username == 'taxmon_python_test_bot' and message.reply_to_message.html_text=='üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç–æ–π:':
                    def _is_valid_email(email: str) -> bool:
                        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email –∞–¥—Ä–µ—Å–∞"""
                        pattern = r'^[a-zA-Z0-9._%+-]+@skbkontur.ru$'
                        return re.match(pattern, email) is not None
                    email = message.text.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
                    if not _is_valid_email(email):
                        self.telegram_bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å(@skbkontur.ru).")
                        return
                    
                    user_id = message.from_user.id
                    username = message.from_user.username
                    first_name = message.from_user.first_name
                    last_name = message.from_user.last_name
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π email –≤ –±–∞–∑–µ
                    existing_user = self.db.get_user_by_email(email)
                    
                    if existing_user:
                        # Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        existing_user_id, existing_username, existing_first_name, existing_last_name, existing_position, time_zone = existing_user
                        
                        if self.db.add_or_update_user(
                            user_id = existing_user_id,
                            username = existing_username,
                            first_name = existing_first_name,
                            last_name = existing_last_name,
                            position=existing_position,
                            email = email,
                            id_tg = user_id,
                            username_tg = username,
                            time_zone = time_zone
                        ):
                            self.telegram_bot.send_message(
                                message.chat.id,
                                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                                f"Email: {email}\n"
                                f"–¢–µ–ø–µ—Ä—å –≤—ã —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."
                            )
                            if time_zone == None:
                                self.telegram_bot.send_message(message.chat.id, 'üåè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º (–ú—Å–∫/–ï–∫–±)')
                        else:
                            self.telegram_bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
                    else:
                        # –ù–æ–≤—ã–π email - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                        if self.db.add_or_update_user(
                            user_id=user_id,
                            username=username,
                            first_name=first_name,
                            last_name=last_name,
                            email=email
                        ):
                            self.telegram_bot.send_message(
                                message.chat.id,
                                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {email}\n"
                            )
                        else:
                            self.telegram_bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email.")
                elif message.reply_to_message.from_user.username == 'taxmon_python_test_bot' and message.reply_to_message.html_text=='üåè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º (–ú—Å–∫/–ï–∫–±)':
                    time_zone = message.text.strip()
                    
                    user_id = message.from_user.id
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
                    existing_user = self.db.get_user_info_tg(user_id)
                    
                    if existing_user:
                        if self.db.add_or_update_user(
                            user_id = existing_user[1],
                            username = existing_user[2],
                            first_name = existing_user[3],
                            last_name = existing_user[4],
                            position = existing_user[5],
                            email = existing_user[6],
                            id_tg = existing_user[7],
                            username_tg = existing_user[8],
                            time_zone = time_zone
                        ):
                            self.telegram_bot.send_message(
                                message.chat.id,
                                f"‚úÖ –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {time_zone}\n"
                            )
                        else:
                            self.telegram_bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.")
                    else:
                        self.telegram_bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")                        

        @self.telegram_bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call):
            message_data = self.pending_responses.get(call.message.message_id)
            if call.data == "introduce":
                self.telegram_bot.send_message(call.message.chat.id, "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç–æ–π:")
            elif message_data and call.data == "take_work":
                user_id = call.from_user.id
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ is_actual
                message_data['is_actual'] = not message_data['is_actual']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                if message_data['is_actual']:
                    button_text = "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
                else:
                    button_text = f"–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {call.from_user.first_name} {call.from_user.last_name}"
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    db_message = self.db.get_message_by_hash(message_data['message_hash'])
                    if db_message:
                        self.db.create_task(db_message[0], str(user_id))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
                mm_link = self._format_mattermost_link(message_data['post_id'])
                user_info = self._get_user_info(message_data['user_id'])
                username = user_info.get('username', '') if user_info else ''
                
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Mattermost",
                    url=mm_link
                ))
                markup.add(telebot.types.InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –ª—Å Mattermost",
                    url=f"https://chat.skbkontur.ru/kontur/messages/@{username}"
                ))
                markup.add(telebot.types.InlineKeyboardButton(
                    text=button_text,
                    callback_data="take_work"
                ))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.telegram_bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=call.message.html_text,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                self.telegram_bot.answer_callback_query(call.id)

    def _get_message_hash(self, message: str, channel_id: str, post_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return md5(f"{message}-{channel_id}-{post_id}".encode()).hexdigest()
    
    def _is_working_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω–µ—Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö"""
        now_ekb = datetime.now(self.config.ekb_tz)
        now_msk = datetime.now(self.config.msk_tz)
        
        ekb_hour = now_ekb.hour
        msk_hour = now_msk.hour
        
        ekb_time = self.config.non_working_hours['–µ–∫–±']
        msk_time = self.config.non_working_hours['–º—Å–∫']
        
        return (ekb_time['start'] <= ekb_hour < ekb_time['end'] and 
                msk_time['start'] <= msk_hour < msk_time['end'])
    
    def process_message(self, message: str, channel_id: str, post_id: str, user_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message_hash = self._get_message_hash(message, channel_id, post_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        db_message = self.db.get_message_by_hash(message_hash)
        if db_message and db_message[7]:  # is_processed
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        message_id = self.db.add_message(message_hash, message, channel_id, post_id, user_id, time.time())
        
        with self.lock:
            if message_hash in self.processed_messages:
                return
            self.processed_messages.add(message_hash)
        
        if self._is_working_time():
            return
        
        self.message_queue.put({
            'message': message,
            'channel_id': channel_id,
            'post_id': post_id,
            'user_id': user_id,
            'message_hash': message_hash,
            'timestamp': time.time()
        })
    
    def _get_random_user_by_position(self, position: str):
        random_user=self.db.get_random_user_by_position(position)
        return random_user
    
    def _get_user_info(self, user_id: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Mattermost –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_user = self.db.get_user_info(user_id)
        if db_user:
            return {
                'username': db_user[2],
                'first_name': db_user[3],
                'last_name': db_user[4],
                'position': db_user[5],
                'email': db_user[6]
            }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ Mattermost
        headers = {
            'Authorization': f'Bearer {self.config.mattermost_bearer_token}',
            'Content-Type': 'application/json'
        }
        try:
            response = requests.get(
                f"{self.config.mattermost_server_url}/api/v4/users/{user_id}",
                headers=headers,
                timeout=5
            )
            if response.status_code == 200:
                user_data = response.json()
                user_data_from_bd=self.db.get_user_email(user_data.get('email'))
                if user_data_from_bd != None:
                    # Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    email, user_id, username, time_zone = user_data_from_bd[5:8]
                    
                    self.db.add_or_update_user(
                        user_id=user_data.get('id'),
                        username=user_data.get('username'),
                        first_name=user_data.get('first_name'),
                        last_name=user_data.get('last_name'),
                        position=user_data.get('position'),
                        email = email,
                        id_tg = user_id,
                        username_tg = username,
                        time_zone = time_zone
                    )
                else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    self.db.add_or_update_user(
                        user_id=user_id,
                        username=user_data.get('username'),
                        first_name=user_data.get('first_name'),
                        last_name=user_data.get('last_name'),
                        position=user_data.get('position'),
                        email=user_data.get('email')
                    )
                return user_data
        except Exception as e:
            LOGGER.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}")
        
        return {'username': user_id}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

    def _send_to_mattermost(self, channel_id: str, message: str, post_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Mattermost"""
        headers = {
            'Authorization': f'Bearer {self.config.mattermost_bearer_token}',
            'Content-Type': 'application/json'
        }
        payload = {
            "channel_id": channel_id,
            "message": message,
        }
        
        if post_id and len(post_id) == 26:
            payload["root_id"] = post_id
            
        try:
            response = requests.post(
                f"{self.config.mattermost_server_url}/api/v4/posts",
                headers=headers,
                json=payload,
                timeout=10
            )
            if response.status_code != 201:
                LOGGER.error(f"Mattermost error: {response.text}")
        except Exception as e:
            LOGGER.error(f"Mattermost send error: {str(e)}")
    
    def _format_mattermost_link(self, post_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Mattermost"""
        if not post_id or len(post_id) != 26:
            return "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ post_id
        clean_post_id = post_id.strip()
        return f"{self.config.mattermost_server_url}/kontur/pl/{clean_post_id}"

    def _send_to_telegram(self, message_data: dict):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
        if message_data['user_id'] == self.config.bot_user_id:
            return
        if message_data['message'].startswith('–û—Ç–≤–µ—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω—Ü–∞'):
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        user_info = self._get_user_info(message_data['user_id'])
        username = user_info.get('username', '')
        first_name = user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        last_name = user_info.get('last_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        position = user_info.get('position', '')
        email = user_info.get('email', '')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        mm_link = self._format_mattermost_link(message_data['post_id'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        current_time = datetime.now(self.config.ekb_tz)
        current_hour = current_time.hour

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        users_in_time_zone = self.db.get_users_with_time_zone()

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        working_usernames  = []
        
        for user in users_in_time_zone:
            user_id, username_tg, position, time_zone = user
            if user_id is not None and time_zone.lower() in self.config.non_working_hours:
                working_hours = self.config.non_working_hours[time_zone.lower()]
                if working_hours['start'] <= current_hour < working_hours['end']:
                    working_usernames.append(username_tg)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üö® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üö®\n\n"
            f"–û—Ç: {position}:<a href='https://staff.skbkontur.ru/profile/{username}'><b> {first_name} {last_name}</b></a>\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_data['message']}\n"
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
        if working_usernames:
            message_text += "–í–Ω–∏–º–∞–Ω–∏–µ: "
        for working in working_usernames:
            message_text += '@' + working + ' '

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Mattermost",
                url=mm_link
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –ª—Å Mattermost",
                url=f"https://chat.skbkontur.ru/kontur/messages/@{username}"
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                callback_data="take_work"
            ))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = self.telegram_bot.send_message(
                self.config.telegram_chat_id,
                message_text,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
            
            self.pending_responses[sent_msg.message_id] = {
                **message_data,
                'is_actual': True  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
            }
            Thread(target=self._check_response, args=(message_data,)).start()
            
        except Exception as e:
            LOGGER.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

    def _check_response(self, message_data: dict):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        time.sleep(360)  # –ñ–¥–µ–º 1 —á–∞—Å
        
        with self.lock:
            if message_data['post_id'] not in [msg['post_id'] for msg in self.pending_responses.values()]:
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç
        db_message = self.db.get_message_by_hash(message_data['message_hash'])
        if db_message and db_message[8]:  # is_responded
            return
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –±—ã–ª–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        self._notify_manager(message_data)
    
    def _notify_manager(self, message_data: dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        user_info = self._get_user_info(message_data['user_id'])
        username = user_info.get('username', '')
        first_name = user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        last_name = user_info.get('last_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        position = user_info.get('position', '')
        email = user_info.get('email', '')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        mm_link = self._format_mattermost_link(message_data['post_id'])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"‚ö†Ô∏è –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚ö†Ô∏è\n\n"
            f"–û—Ç: {position}:<a href='https://staff.skbkontur.ru/profile/{username}'><b> {first_name} {last_name}</b></a>\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_data['message']}\n"
        )

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ Mattermost",
                url=mm_link
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –ª—Å Mattermost",
                url=f"https://chat.skbkontur.ru/kontur/messages/@{username}"
            ))
            markup.add(telebot.types.InlineKeyboardButton(
                text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                callback_data="take_work"
            ))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = self.telegram_bot.send_message(
                self.config.manager_chat_id,
                message_text,
                parse_mode='HTML',
                reply_markup=markup,
                disable_web_page_preview=True
            )
            
            self.pending_responses[sent_msg.message_id] = {
                **message_data,
                'is_actual': True  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
            }
            Thread(target=self._check_response, args=(message_data,)).start()
            
        except Exception as e:
            LOGGER.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
    
    def start_processing(self, stop_event: Event):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while not stop_event.is_set():
            try:
                message_data = self.message_queue.get(timeout=1)
                self._send_to_telegram(message_data)
                self.message_queue.task_done()
            except Exception as e:
                continue
